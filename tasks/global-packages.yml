---
- name: Install NVM.
  shell: >
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
  args:
    creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

- name: Download the AWS CLI installer.
  get_url: 
    url: https://awscli.amazonaws.com/AWSCLIV2.pkg
    dest: /tmp/AWSCLIV2.pkg
    mode: '0774'
  register: aws_cli_installer

- name: Install AWS CLI.
  become: true
  command: installer -pkg /tmp/AWSCLIV2.pkg -target /
  when: aws_cli_installer.changed

- name: Configure AWS CLI.
  shell: aws configure set {{ item.key }} {{ item.value }} --profile {{ aws_cli_profile }}
  # no_log: true
  with_dict:
    aws_access_key_id: "{{ aws_cli_access_key_id }}"
    aws_secret_access_key: "{{ aws_cli_secret_access_key }}"
    region: "{{ aws_cli_region }}"
    format: "{{ aws_cli_format }}"
  become_user: "{{ aws_cli_system_user }}"
  changed_when: false

- name: Install global Composer packages.
  composer:
    command: "{{ (item.state | default('present') == 'absent') | ternary('remove', 'require') }}"
    arguments: "{{ item.name | default(item) }} {{ item.version | default('@stable') }}"
    # Ansible 2.4 supports `global_command` making `working_dir` optional.
    working_dir: "{{ lookup('env', 'COMPOSER_HOME') | default('~/.composer', true) }}"
  loop: '{{ composer_packages }}'

- name: Install global NPM packages.
  npm:
    name: '{{ item.name | default(item) }}'
    state: "{{ item.state | default('present') }}"
    version: '{{ item.version | default(omit) }}'
    global: true
    executable: '{{ item.executable | default(omit) }}'
  loop: '{{ npm_packages }}'

- name: Install global Pip packages.
  pip:
    name: '{{ item.name | default(item) }}'
    state: "{{ item.state | default('present') }}"
    version: '{{ item.version | default(omit) }}'
    executable: '{{ item.executable | default(omit) }}'
  loop: '{{ pip_packages }}'

- name: Install global Ruby gems.
  gem:
    name: '{{ item.name | default(item) }}'
    state: "{{ item.state | default('present') }}"
    version: '{{ item.version | default(omit) }}'
    user_install: false
    executable: '{{ item.executable | default(omit) }}'
  loop: '{{ gem_packages }}'
